# -*- coding: utf-8 -*-
"""bài tập nhóm học máy- Public.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yfZVwmbu3nwCSICk9Fsp6hIruUzx3FR7

# Deep Learning in Genomics Primer (*Tutorial*)

This tutorial is a supplement to the manuscript, **A Primer on Deep Learning in Genomics** (*Nature Genetics, 2018*) by James Zou, Mikael Huss, Abubakar Abid, Pejman Mohammadi, Ali Torkamani & Amalio Telentil. [Read the accompanying paper here](https://www.nature.com/articles/s41588-018-0295-5).

If you have any questions or feedback regarding this tutorial, please contact Abubakar Abid <<a12d@stanford.edu>> or James Zou <<jamesz@stanford.edu>>.

## Outline
"""



"""#**My Fist ML Project**

##**Load data**
"""

import pandas as pd
df=pd.read_csv('https://raw.githubusercontent.com/dataprofessor/data/refs/heads/master/delaney_solubility_with_descriptors.csv')
df

"""##**DATA PREPARATION**

###data separation as x and y
"""

y= df['logS']
y

x=df.drop('logS',axis=1)
x

"""### data splitting

"""

from  sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test, = train_test_split(x, y, test_size=0.2, random_state=100)

x_train

x_test

y_train

y_test

"""## Model Buiding

### linear Regression
"""

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(x_train, y_train)

y_lr_train_pred = lr.predict(x_train)
y_lr_test_pred = lr.predict(x_test)

print(y_lr_test_pred,y_lr_train_pred)

y_lr_test_pred

"""### **Evaluate model performance**

## **Training The Model**
"""

from sklearn.metrics import mean_squared_error, r2_score
lr_train_mse = mean_squared_error(y_train,y_lr_train_pred)
lr_train_r2= r2_score(y_train, y_lr_train_pred)

lr_test_mse= mean_squared_error(y_test,y_lr_test_pred)
lr_test_r2 = r2_score(y_test,y_lr_test_pred)

lr_results=pd.DataFrame(['linear regression', lr_train_mse, lr_train_r2, lr_test_mse, lr_test_r2]).transpose()
lr_results.columns=['Method','Training MSE','Training R2','Test MSE','Test R2']

lr_results

"""* **How to Use This Tutorial**
* **0. Background**
* **1. Curate the Data**
* **2. Select the Architecture and Train**
* **3. Evaluate**
* **4. Interpret**

## **Random Forest**
"""



"""### **Training The Model**"""

from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor(max_depth =2, random_state=100)
rf.fit(x_train,y_train)

import matplotlib.pyplot as plt
plt.scatter(x=y_train, y=y_lr_train_pred,alpha=0.3)
plt.plot()

